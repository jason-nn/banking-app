{"version":3,"sources":["components/Button.js","components/Login.js","components/Navbar.js","components/UserRow.js","components/UserInfoCard.js","components/ExpenseRow.js","components/ExpenseRow2.js","components/AdminView.js","components/SelectOptions.js","components/TransactionRow3.js","components/Deposit.js","components/Withdraw.js","components/TransactionRow4.js","components/Transfer.js","components/TransactionRow1.js","components/TransactionRow2.js","components/Transactions.js","components/SettingsSelect.js","components/Settings.js","components/Help.js","App.js","index.js"],"names":["Button","className","onClick","text","type","Login","setError","setUser","error","users","addUser","setIsAdmin","setSuccessfulSignup","successfulSignUp","usernameInputRef","useRef","passwordInputRef","useState","register","setRegister","signupError","setSignupError","signupFirstNameRef","signupLastNameRef","signupUsernameRef","signupPasswordRef","onSubmit","e","preventDefault","firstName","current","value","toUpperCase","lastName","username","password","firstNames","map","user","lastNames","usernames","firstNameIndex","findIndex","lastNameIndex","usernameIndex","setTimeout","match","ref","usernameInput","passwordInput","passwords","i","passwordIndex","isAdmin","submitDetails","Navbar","to","activeClassName","exact","UserRow","client","accountNo","balance","toLocaleString","style","currency","UserInfoCard","currentUser","ExpenseRow","expense","showModal","description","amount","ExpenseRow2","percentage","toFixed","AdminView","addExpense","allExpenses","editExpense","deleteExpense","nonAdminUsers","filter","firstNameRef","lastNameRef","usernameRef","passwordRef","balanceRef","descriptionRef","amountRef","loadingMessage","setLoadingMessage","expenses","parseInt","account","displayExpenses","setDisplayExpenses","checkExpenses","length","useEffect","mounted","displayModal","setDisplayModal","currentExpense","setCurrentExpense","newDescription","setNewDescription","newAmount","setNewAmount","console","log","organizedExpenses","total","key","index","push","chartExpenses","pop","chartData","temp","parseFloat","step","rows","renderRows","renderExpenses","renderSummary","width","height","chartType","loader","data","options","backgroundColor","pieHole","animation","startup","easing","duration","chartArea","colors","pieSliceTextStyle","color","pieSliceBorderColor","pieSliceText","legend","position","maxLines","alignment","textStyle","rootProps","onChange","target","SelectOptions","TransactionRow3","transaction","date","time","Deposit","deposit","transactions","accountRef","message","setMessage","juanbalance","displayBalance","setDisplayBalance","deposits","displayHistory","setDisplayHistory","checkTransactions","userToDisplay","userCopy","handleChange","renderSelectOptions","renderHistory","Withdraw","withdraw","withdrawals","accountIndex","accountBalance","TransactionRow4","toFirstName","toLastName","Transfer","transfer","fromRef","toRef","displayBalance1","setDisplayBalance1","displayBalance2","setDisplayBalance2","n","transfers","from","fromIndex","fromBalance","TransactionRow1","TransactionRow2","fromFirstName","fromLastName","Transactions","displayDeposits","setDisplayDeposits","displayWithdrawals","setDisplayWithdrawals","displayTransfers","setDisplayTransfers","renderDeposits","renderWithdrawals","renderTransfers","SettingsSelect","Settings","LogoutFunction","editUser","clientSideFirstName","setClientSideFirstName","clientSideLastName","setClientSideLastName","clientSideUsername","setClientSideUsername","clientSidePassword","setClientSidePassword","clientSideConfirmPassword","setClientSideConfirmPassword","adminSideDisplayUser","setAdminSideDisplayUser","adminSideFirstName","setAdminSideFirstName","adminSideLastName","setAdminSideLastName","adminSideUsername","setAdminSideUsername","adminSidePassword","setAdminSidePassword","adminSideConfirmPassword","setAdminSideConfirmPassword","Help","App","months","formatDate","number","getSuffix","hour","minutes","twelveHour","generateTransactionKey","newTransactionKey","localStorage","transactionKey","generateExpenseKey","newExpenseKey","expenseKey","newAccountNumber","accountNumber","generateAccountNumber","newUserList","setUserList","bankUsers","JSON","stringify","Date","hours","getHours","getMinutes","month","getMonth","day","getDate","suffix","newTransactions","setTransactions","transactionHistory","parse","setAllExpenses","Logout","path","component","allExpensesCopy","accountNos","currentKey","splice","userIndex","toIndex","a","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e5ae17e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Button({ className, onClick, text }) {\n    return (\n        <>\n            <button type=\"submit\" className={className} onClick={onClick}>\n                {text}\n            </button>\n        </>\n    );\n}\n","import React, { useState, useRef } from 'react';\nimport Button from './Button';\nimport './Login.css';\n// import Logo from \"./bank-logo.svg\";\n\nexport default function Login({\n    setError,\n    setUser,\n    error,\n    users,\n    addUser,\n    setIsAdmin,\n    setSuccessfulSignup,\n    successfulSignUp,\n}) {\n    // const [details, setDetails] = useState({\n    //   usernameInput: \"\",\n    //   passwordInput: \"\",\n    // });\n\n    // gets submit values then passes it back to parent\n    // const submitHandler = (e) => {\n    //   e.preventDefault();\n    //   LoginFunction(details);\n    //   e.target.value = \"\";\n    // };\n\n    const usernameInputRef = useRef();\n    const passwordInputRef = useRef();\n\n    function submitDetails(e) {\n        e.preventDefault();\n        const usernameInput = usernameInputRef.current.value;\n        const passwordInput = passwordInputRef.current.value;\n\n        const usernames = users.map((user) => user.username);\n        const passwords = users.map((user) => user.password);\n\n        // const lastNames = users.map((user) => user.lastName);\n\n        const usernameIndex = usernames.findIndex((i) => i === usernameInput);\n        const passwordIndex = passwords.findIndex((i) => i === passwordInput);\n\n        if (usernameInput === '') {\n            setError('Please enter a username.');\n            setTimeout(() => setError(''), 2000);\n        } else if (passwordInput === '') {\n            setError('Please enter a password.');\n            setTimeout(() => setError(''), 2000);\n        } else if (\n            usernameIndex === passwordIndex &&\n            usernameIndex >= 0 &&\n            passwordIndex >= 0\n        ) {\n            setUser(users[usernameIndex]);\n            if (users[usernameIndex].isAdmin) {\n                setIsAdmin(true);\n            } else {\n                setIsAdmin(false);\n            }\n            setError('');\n        } else if (usernameIndex === -1) {\n            setError('User does not exist.');\n            usernameInputRef.current.value = '';\n            passwordInputRef.current.value = '';\n            setTimeout(() => setError(''), 2000);\n        } else if (usernameIndex >= 0) {\n            setError('Incorrect password.');\n            passwordInputRef.current.value = '';\n            setTimeout(() => setError(''), 2000);\n        } else {\n            setError('Login failed. Please try again.');\n            usernameInputRef.current.value = '';\n            passwordInputRef.current.value = '';\n            setTimeout(() => setError(''), 2000);\n        }\n        // LoginFunction(usernameInput, passwordInput);\n    }\n\n    const [register, setRegister] = useState(false);\n\n    const [signupError, setSignupError] = useState('');\n\n    const signupFirstNameRef = useRef();\n    const signupLastNameRef = useRef();\n    const signupUsernameRef = useRef();\n    const signupPasswordRef = useRef();\n\n    return (\n        <div className=\"login-component\">\n            <div className=\"login-hero\">\n                <h1 className=\"login-logo\">banque.</h1>\n                <div className=\"hero-content\">\n                    <h1 className=\"login-hero-title\">\n                        The bank you can trust.\n                    </h1>\n                    <p className=\"login-hero-text\">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                        Nunc a nisl molestie, pretium eros sit amet,\n                        sollicitudin risus. Etiam finibus non libero et\n                        faucibus. Aliquam eu neque eu arcu ultrices placerat.\n                        Phasellus nec malesuada elit. Sed eu nibh enim.\n                    </p>\n                </div>\n            </div>\n            {!register ? (\n                <div className=\"form-container\">\n                    <h1 className=\"login-logo-mobile\">banque.</h1>\n                    <h2 className=\"login-message\">Log in to your account</h2>\n                    <form\n                        className=\"login-form\"\n                        onSubmit={(e) => submitDetails(e)}\n                    >\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    Username\n                                </div>\n                                <input\n                                    className=\"usernameInput input\"\n                                    ref={usernameInputRef}\n                                    type=\"text\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    Password\n                                </div>\n                                <input\n                                    className=\"passwordInput input\"\n                                    ref={passwordInputRef}\n                                    type=\"password\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"button-container\">\n                            <Button\n                                className=\"loginSubmitButton login-button\"\n                                text=\"Log In\"\n                            />\n                            <Button\n                                className=\"secondary-login-button\"\n                                text=\"Sign Up\"\n                                onClick={() => {\n                                    setRegister(true);\n                                    usernameInputRef.current.value = '';\n                                    passwordInputRef.current.value = '';\n                                }}\n                            />\n                        </div>\n                        {error !== '' ? (\n                            <div className=\"login-error\">{error}</div>\n                        ) : (\n                            ''\n                        )}\n                        {successfulSignUp !== '' ? (\n                            <div className=\"signup-success\">\n                                {successfulSignUp}\n                            </div>\n                        ) : (\n                            ''\n                        )}\n                    </form>\n                </div>\n            ) : (\n                <div className=\"form-container\">\n                    <h1 className=\"login-logo-mobile\">banque.</h1>\n                    <h2 className=\"login-message\">Sign up for an account</h2>\n                    <form\n                        className=\"login-form\"\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const firstName =\n                                signupFirstNameRef.current.value.toUpperCase();\n                            const lastName =\n                                signupLastNameRef.current.value.toUpperCase();\n                            const username = signupUsernameRef.current.value;\n                            const password = signupPasswordRef.current.value;\n\n                            const firstNames = users.map(\n                                (user) => user.firstName\n                            );\n                            const lastNames = users.map(\n                                (user) => user.lastName\n                            );\n                            const usernames = users.map(\n                                (user) => user.username\n                            );\n\n                            const firstNameIndex = firstNames.findIndex(\n                                (value) => value === firstName\n                            );\n                            const lastNameIndex = lastNames.findIndex(\n                                (value) => value === lastName\n                            );\n                            const usernameIndex = usernames.findIndex(\n                                (users) => users === username\n                            );\n\n                            if (\n                                !firstName ||\n                                !lastName ||\n                                !username ||\n                                !password\n                            ) {\n                                setSignupError(\n                                    'Incomplete information. Please fill in all fields.'\n                                );\n                                setTimeout(() => setSignupError(''), 2000);\n                            } else if (usernameIndex >= 0) {\n                                setSignupError('Username has been taken.');\n                                setTimeout(() => setSignupError(''), 2000);\n                                signupUsernameRef.current.value = null;\n                            } else if (\n                                firstNameIndex === lastNameIndex &&\n                                firstNameIndex >= 0\n                            ) {\n                                setSignupError('User already exists');\n                                setTimeout(() => setSignupError(''), 2000);\n                                signupFirstNameRef.current.value = null;\n                                signupLastNameRef.current.value = null;\n                                signupUsernameRef.current.value = null;\n                                signupPasswordRef.current.value = null;\n                            } else {\n                                if (\n                                    firstName.match(/^[A-Za-z]+$/) &&\n                                    lastName.match(/^[A-Za-z]+$/)\n                                ) {\n                                    addUser(\n                                        firstName,\n                                        lastName,\n                                        0,\n                                        username,\n                                        password\n                                    );\n                                    setSignupError('');\n                                    setRegister(false);\n                                    setSuccessfulSignup(\n                                        'Account successfully created.'\n                                    );\n                                    setTimeout(\n                                        () => setSuccessfulSignup(''),\n                                        3000\n                                    );\n                                    signupFirstNameRef.current.value = null;\n                                    signupLastNameRef.current.value = null;\n                                    signupUsernameRef.current.value = null;\n                                    signupPasswordRef.current.value = null;\n                                } else {\n                                    setSignupError(\n                                        'Please use letters only for first name and last name'\n                                    );\n                                    setTimeout(() => setSignupError(''), 2000);\n                                }\n                            }\n                        }}\n                    >\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    First Name\n                                </div>\n                                <input\n                                    className=\"usernameInput input\"\n                                    ref={signupFirstNameRef}\n                                    type=\"text\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    Last Name\n                                </div>\n                                <input\n                                    className=\"usernameInput input\"\n                                    ref={signupLastNameRef}\n                                    type=\"text\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    Username\n                                </div>\n                                <input\n                                    className=\"usernameInput input\"\n                                    ref={signupUsernameRef}\n                                    type=\"text\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"input-container\">\n                            <label>\n                                <div className=\"login-input-label\">\n                                    Password\n                                </div>\n                                <input\n                                    className=\"passwordInput input\"\n                                    ref={signupPasswordRef}\n                                    type=\"password\"\n                                />\n                            </label>\n                        </div>\n                        <div className=\"button-container\">\n                            <Button\n                                className=\"loginSubmitButton login-button\"\n                                text=\"Sign Up\"\n                            />\n\n                            <Button\n                                className=\"secondary-login-button\"\n                                text=\"Cancel\"\n                                onClick={() => setRegister(false)}\n                            />\n                        </div>\n                        {signupError !== '' ? (\n                            <div className=\"login-error\">{signupError}</div>\n                        ) : (\n                            ''\n                        )}\n                    </form>\n                </div>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\n// import Button from \"./Button\";\nimport { NavLink } from 'react-router-dom';\nimport './Navbar.css';\n\nexport default function Navbar({ isAdmin }) {\n    return (\n        <nav className=\"navbar\">\n            <div className=\"main-nav\">\n                <h1 className=\"navbar-logo\">banque.</h1>\n                <NavLink\n                    to=\"/banking-app\"\n                    activeClassName=\"nav-active\"\n                    exact\n                    className=\"nav-link\"\n                >\n                    <div className=\"nav-link-content\">\n                        <span className=\"material-icons\">home</span>\n                        <span>Home</span>\n                    </div>\n                </NavLink>\n                <NavLink\n                    to=\"/banking-app/deposit\"\n                    activeClassName=\"nav-active\"\n                    className=\"nav-link\"\n                >\n                    <div className=\"nav-link-content\">\n                        <span className=\"material-icons\">download</span>\n                        <span>Deposit</span>\n                    </div>\n                </NavLink>\n                <NavLink\n                    to=\"/banking-app/withdraw\"\n                    activeClassName=\"nav-active\"\n                    className=\"nav-link\"\n                >\n                    <div className=\"nav-link-content\">\n                        <span className=\"material-icons\">upload</span>\n                        <span>Withdraw</span>\n                    </div>\n                </NavLink>\n                <NavLink\n                    to=\"/banking-app/transfer\"\n                    activeClassName=\"nav-active\"\n                    className=\"nav-link\"\n                >\n                    <div className=\"nav-link-content\">\n                        <span className=\"material-icons\">sync_alt</span>\n                        <span>Transfer</span>\n                    </div>\n                </NavLink>\n                {isAdmin && (\n                    <NavLink\n                        to=\"/banking-app/transactions\"\n                        activeClassName=\"nav-active\"\n                        className=\"nav-link\"\n                    >\n                        <div className=\"nav-link-content\">\n                            <span className=\"material-icons\">history</span>\n                            <span>History</span>\n                        </div>\n                    </NavLink>\n                )}\n            </div>\n\n            <NavLink\n                to=\"/banking-app/settings\"\n                className=\"nav-link\"\n                activeClassName=\"nav-active\"\n            >\n                <div className=\"nav-link-content\">\n                    <span className=\"material-icons\">settings</span>\n                    <span>Settings</span>\n                </div>\n            </NavLink>\n        </nav>\n    );\n}\n","import React from \"react\";\n\nexport default function UserRow({ client }) {\n    return (\n        <>\n            <tr>\n                <td>\n                    {client.firstName} {client.lastName}{\" \"}\n                    <p className=\"account-number\">{client.accountNo}</p>\n                </td>\n                <td>\n                    {client.balance.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React from 'react';\n\nexport default function UserInfoCard({ currentUser }) {\n    return (\n        <div className='user-card-container'>\n            <div className='user-account-info'>\n                <div className='main-header'>\n                    <h3 className='main-title'>Your Account</h3>\n                </div>\n                <div className='user-account-name'>\n                    <h3>\n                        {currentUser.firstName} {currentUser.lastName}\n                    </h3>\n                    <h4>{currentUser.accountNo} </h4>\n                </div>\n            </div>\n\n            <div className='user-account-balance'>\n                <div className='main-header'>\n                    <h3 className='main-title'>Current Balance</h3>\n                </div>\n                <h2>\n                    {currentUser.balance.toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: 'PHP',\n                    })}\n                </h2>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport default function ExpenseRow({ expense, showModal }) {\n    return (\n        <>\n            <tr>\n                <td>{expense.description}</td>\n                <td>\n                    {expense.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n                <td>\n                    <Button\n                        className=\"edit-expense-button material-icons\"\n                        text=\"edit\"\n                        onClick={() => showModal(expense)}\n                    />\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React from \"react\";\n\nexport default function ExpenseRow2({ expense }) {\n    return (\n        <>\n            <tr className=\"expense-summary\">\n                <td>{expense.description}</td>\n                <td>\n                    {expense.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n                <td>{expense.percentage.toFixed(1)}%</td>\n            </tr>\n        </>\n    );\n}\n","import './AdminView.css';\nimport React, { useRef, useState, useEffect } from 'react';\nimport Button from './Button';\nimport UserRow from './UserRow';\nimport UserInfoCard from './UserInfoCard';\nimport ExpenseRow from './ExpenseRow';\nimport ExpenseRow2 from './ExpenseRow2';\nimport Chart from 'react-google-charts';\n\nconst AdminView = ({\n    currentUser,\n    users,\n    addUser,\n    isAdmin,\n    addExpense,\n    allExpenses,\n    editExpense,\n    deleteExpense,\n}) => {\n    const nonAdminUsers = users.filter((user) => !user.isAdmin);\n\n    function renderRows() {\n        const rows = [];\n        for (let i = 0; i < nonAdminUsers.length; i++) {\n            rows.push(\n                <UserRow\n                    key={nonAdminUsers[i].accountNo}\n                    client={nonAdminUsers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const firstNameRef = useRef();\n    const lastNameRef = useRef();\n    const usernameRef = useRef();\n    const passwordRef = useRef();\n    const balanceRef = useRef();\n\n    const descriptionRef = useRef();\n    const amountRef = useRef();\n\n    const [error, setError] = useState(null);\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    const expenses = allExpenses.filter(\n        (expense) =>\n            parseInt(expense.account) === parseInt(currentUser.accountNo)\n    );\n\n    function renderExpenses() {\n        const rows = [];\n        for (let i = 0; i < expenses.length; i++) {\n            rows.push(\n                <ExpenseRow\n                    key={expenses[i].key}\n                    expense={expenses[i]}\n                    showModal={(expense) => showModal(expense)}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const [displayExpenses, setDisplayExpenses] = useState(false);\n\n    function checkExpenses() {\n        const expenses = allExpenses.filter(\n            (expense) =>\n                parseInt(expense.account) === parseInt(currentUser.accountNo)\n        );\n\n        if (expenses.length > 0) {\n            setDisplayExpenses(true);\n        } else {\n            setDisplayExpenses(false);\n        }\n    }\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkExpenses();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkExpenses();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [allExpenses]);\n\n    const [displayModal, setDisplayModal] = useState(false);\n\n    const [currentExpense, setCurrentExpense] = useState(null);\n\n    const [newDescription, setNewDescription] = useState(null);\n    const [newAmount, setNewAmount] = useState(null);\n\n    function showModal(expense) {\n        console.log(expense);\n        setCurrentExpense(expense);\n        setNewDescription(expense.description);\n        setNewAmount(expense.amount);\n        setDisplayModal(true);\n    }\n\n    // ORGANIZING EXPENSES\n    const organizedExpenses = [];\n    let total = 0;\n    let key = 0;\n\n    for (const expense of expenses) {\n        const description = expense.description;\n        const descriptions = organizedExpenses.map((i) => i.description);\n        const index = descriptions.findIndex((i) => i === description);\n        if (index === -1) {\n            organizedExpenses.push({\n                key,\n                description,\n                amount: expense.amount,\n            });\n            key += 1;\n        } else {\n            organizedExpenses[index].amount += expense.amount;\n        }\n        total += expense.amount;\n    }\n\n    organizedExpenses.push({ key, description: 'TOTAL', amount: total });\n\n    for (const i of organizedExpenses) {\n        i['percentage'] = (i.amount / total) * 100;\n    }\n\n    const chartExpenses = [...organizedExpenses];\n    chartExpenses.pop();\n\n    const chartData = [['Expense', 'Amount Spent']];\n\n    for (const i of chartExpenses) {\n        const temp = [];\n        temp.push(i.description);\n        temp.push(i.amount);\n        chartData.push(temp);\n    }\n\n    function renderSummary() {\n        const rows = [];\n        for (let i = 0; i < organizedExpenses.length; i++) {\n            rows.push(\n                <ExpenseRow2\n                    key={organizedExpenses[i].key}\n                    expense={organizedExpenses[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    if (isAdmin) {\n        return (\n            <>\n                <h3 className=\"greeting-text\">\n                    Welcome,{' '}\n                    <p className=\"greeting-name\">{currentUser.firstName}</p>\n                </h3>\n                <div className=\"admin-dashboard\">\n                    <div className=\"card-container\">\n                        <div className=\"main-header\">\n                            <h1 className=\"main-title\">Add an account</h1>\n                        </div>\n                        <form\n                            className=\"account-form\"\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                const firstName =\n                                    firstNameRef.current.value.toUpperCase();\n                                const lastName =\n                                    lastNameRef.current.value.toUpperCase();\n                                const username = usernameRef.current.value;\n                                const password = passwordRef.current.value;\n                                const balance = parseFloat(\n                                    balanceRef.current.value\n                                );\n\n                                const firstNames = users.map(\n                                    (user) => user.firstName\n                                );\n                                const lastNames = users.map(\n                                    (user) => user.lastName\n                                );\n                                const usernames = users.map(\n                                    (user) => user.username\n                                );\n\n                                const firstNameIndex = firstNames.findIndex(\n                                    (value) => value === firstName\n                                );\n                                const lastNameIndex = lastNames.findIndex(\n                                    (value) => value === lastName\n                                );\n                                const usernameIndex = usernames.findIndex(\n                                    (users) => users === username\n                                );\n\n                                console.log(usernameIndex);\n\n                                if (\n                                    !firstName ||\n                                    !lastName ||\n                                    !username ||\n                                    !password ||\n                                    !balance\n                                ) {\n                                    setError(\n                                        'Incomplete information. Please fill in all fields.'\n                                    );\n                                    setTimeout(() => setError(null), 2000);\n                                } else if (usernameIndex >= 0) {\n                                    setError('Username has been taken.');\n                                    setTimeout(() => setError(null), 2000);\n                                    usernameRef.current.value = null;\n                                } else if (\n                                    firstNameIndex === lastNameIndex &&\n                                    firstNameIndex >= 0\n                                ) {\n                                    setError('User already exists');\n                                    setTimeout(() => setError(null), 2000);\n                                    firstNameRef.current.value = null;\n                                    lastNameRef.current.value = null;\n                                    usernameRef.current.value = null;\n                                    passwordRef.current.value = null;\n                                    balanceRef.current.value = null;\n                                } else if (balance <= 0) {\n                                    setError(\n                                        'Please enter an amount greater than 0.'\n                                    );\n                                    setTimeout(() => setError(null), 2000);\n                                    balanceRef.current.value = null;\n                                } else {\n                                    if (\n                                        firstName.match(/^[A-Za-z]+$/) &&\n                                        lastName.match(/^[A-Za-z]+$/)\n                                    ) {\n                                        setLoadingMessage(\n                                            'Creating account...'\n                                        );\n                                        setTimeout(() => {\n                                            addUser(\n                                                firstName,\n                                                lastName,\n                                                balance,\n                                                username,\n                                                password\n                                            );\n                                            setLoadingMessage(null);\n                                            setError(null);\n                                        }, 2000);\n                                    } else {\n                                        setError(\n                                            'Please use letters only for first name and last name'\n                                        );\n                                        setTimeout(() => setError(null), 2000);\n                                    }\n                                }\n                            }}\n                        >\n                            <div className=\"transaction-form\">\n                                <label>\n                                    <div className=\"input-label\">\n                                        First Name\n                                    </div>\n                                    <input\n                                        type=\"text\"\n                                        ref={firstNameRef}\n                                        className=\"input-field\"\n                                    />\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Last Name</div>\n                                    <input\n                                        type=\"text\"\n                                        ref={lastNameRef}\n                                        className=\"input-field\"\n                                    ></input>\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Username</div>\n                                    <input\n                                        type=\"text\"\n                                        ref={usernameRef}\n                                        className=\"input-field\"\n                                    ></input>\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Password</div>\n                                    <input\n                                        type=\"text\"\n                                        ref={passwordRef}\n                                        className=\"input-field input-password\"\n                                    ></input>\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">\n                                        Balance (₱)\n                                    </div>\n                                    <input\n                                        type=\"number\"\n                                        ref={balanceRef}\n                                        className=\"input-field\"\n                                        step=\".01\"\n                                    ></input>\n                                </label>\n                            </div>\n\n                            <Button className=\"main-button\" text=\"Add User\" />\n                        </form>\n                    </div>\n                    {error !== null ? (\n                        <div className=\"error-box\">{error}</div>\n                    ) : (\n                        ''\n                    )}\n                    {loadingMessage !== null ? (\n                        <div className=\"loading-box\">{loadingMessage}</div>\n                    ) : (\n                        ''\n                    )}\n\n                    <br />\n                    <br />\n                    <div className=\"card-container\">\n                        <div className=\"main-header\">\n                            <h1 className=\"main-title\">Accounts</h1>\n                        </div>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Account</th>\n                                    <th>Balance</th>\n                                </tr>\n                            </thead>\n                            <tbody>{renderRows()}</tbody>\n                        </table>\n                    </div>\n                </div>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <h3 className=\"greeting-text\">\n                    Welcome,{' '}\n                    <p className=\"greeting-name\">{currentUser.firstName}</p>\n                </h3>\n\n                <UserInfoCard currentUser={currentUser} />\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">Add an expense</h1>\n                    </div>\n                    <form\n                        className=\"account-form\"\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const account = currentUser.accountNo;\n                            const description = descriptionRef.current.value;\n                            const amount = amountRef.current.value;\n\n                            if (!description || !amount) {\n                                setError(\n                                    'Incomplete information. Please fill in all fields.'\n                                );\n                                setTimeout(() => setError(null), 2000);\n                            } else {\n                                setLoadingMessage('Adding expense...');\n                                setTimeout(() => {\n                                    addExpense(account, description, amount);\n                                }, 2000);\n                            }\n                        }}\n                    >\n                        <div className=\"transaction-form\">\n                            <label>\n                                <div className=\"input-label\">Expense</div>\n                                <input\n                                    type=\"text\"\n                                    ref={descriptionRef}\n                                    className=\"input-field\"\n                                />\n                            </label>\n                            <label>\n                                <div className=\"input-label\">Amount (₱)</div>\n                                <input\n                                    type=\"number\"\n                                    ref={amountRef}\n                                    className=\"input-field\"\n                                    step=\".01\"\n                                ></input>\n                            </label>\n                        </div>\n\n                        <Button className=\"main-button\" text=\"Add Expense\" />\n                    </form>\n                </div>\n                {error !== null ? <div className=\"error-box\">{error}</div> : ''}\n                {loadingMessage !== null ? (\n                    <div className=\"loading-box\">{loadingMessage}</div>\n                ) : (\n                    ''\n                )}\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">\n                            {displayExpenses\n                                ? 'All Expenses'\n                                : 'No Existing Expenses'}\n                        </h1>\n                    </div>\n                    {displayExpenses ? (\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Expense</th>\n                                    <th>Amount</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>{renderExpenses()}</tbody>\n                        </table>\n                    ) : null}\n                </div>\n                <br />\n                <br />\n                {displayExpenses ? (\n                    <div className=\"summary-card-container\">\n                        <div className=\"summary-container\">\n                            <div className=\"main-header\">\n                                <h1 className=\"main-title\">Expense Summary</h1>\n                            </div>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Expense</th>\n                                        <th>Total Amount</th>\n                                        <th>Percentage</th>\n                                    </tr>\n                                </thead>\n                                <tbody>{renderSummary()}</tbody>\n                            </table>\n                        </div>\n                        <div className=\"chart-container\">\n                            <div className=\"main-header\">\n                                <h1 className=\"main-title\">Expense Chart</h1>\n                            </div>\n                            <Chart\n                                width={'100%'}\n                                height={'250px'}\n                                chartType=\"PieChart\"\n                                loader={<div>Loading Chart</div>}\n                                data={chartData}\n                                options={{\n                                    backgroundColor: 'none',\n                                    pieHole: 0.7,\n                                    animation: {\n                                        startup: true,\n                                        easing: 'in',\n                                        duration: 1500,\n                                    },\n                                    chartArea: {\n                                        width: '70%',\n                                        height: '70%',\n                                    },\n                                    colors: [\n                                        '#f0b549',\n                                        '#b94247',\n                                        '#7d96b3',\n                                        '#a87e30',\n                                        '#9c373c',\n                                    ],\n                                    pieSliceTextStyle: {\n                                        color: '#e0e9ef',\n                                    },\n                                    pieSliceBorderColor: '#3f394a',\n                                    pieSliceText: 'none',\n                                    legend: {\n                                        position: 'right',\n                                        maxLines: 5,\n                                        alignment: 'center',\n                                        textStyle: { color: 'white' },\n                                    },\n                                }}\n                                rootProps={{ 'data-testid': '2' }}\n                            />\n                        </div>\n                    </div>\n                ) : null}\n\n                {displayModal ? (\n                    <div className=\"modal-container\">\n                        <div className=\"modal-box\">\n                            <div className=\"faq-header\">\n                                <Button\n                                    onClick={() => setDisplayModal(false)}\n                                    className=\"close-button material-icons\"\n                                    text=\"close\"\n                                />\n                                <h1 className=\"main-title\">Edit expense</h1>\n                            </div>\n                            <form\n                                className=\"transaction-form\"\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    editExpense(\n                                        currentExpense,\n                                        newDescription,\n                                        newAmount\n                                    );\n                                }}\n                            >\n                                <label>\n                                    <div className=\"input-label\">\n                                        Description\n                                    </div>\n                                    <input\n                                        type=\"text\"\n                                        value={newDescription}\n                                        className=\"input-field\"\n                                        onChange={(e) => {\n                                            setNewDescription(e.target.value);\n                                        }}\n                                    />\n                                </label>\n                                {/* <div>{newDescription}</div> */}\n\n                                <label>\n                                    <div className=\"input-label\">\n                                        Amount (₱)\n                                    </div>\n                                    <input\n                                        type=\"number\"\n                                        value={newAmount}\n                                        step=\".01\"\n                                        className=\"input-field\"\n                                        onChange={(e) => {\n                                            setNewAmount(e.target.value);\n                                        }}\n                                    />\n                                </label>\n                                {/* <div>{newAmount}</div> */}\n\n                                <div className=\"button-container\">\n                                    <Button\n                                        className=\"main-button\"\n                                        text=\"Confirm\"\n                                    />\n                                    <Button\n                                        className=\"secondary-button\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            deleteExpense(currentExpense);\n                                        }}\n                                        text=\"Delete\"\n                                    />\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                ) : null}\n            </>\n        );\n    }\n};\n\nexport default AdminView;\n","import React from \"react\";\n\nexport default function SelectOptions({ client }) {\n    return (\n        <>\n            <option value={client.accountNo}>\n                {client.firstName} {client.lastName} ({client.accountNo})\n            </option>\n        </>\n    );\n}\n","import React from \"react\";\n\nexport default function TransactionRow3({ transaction }) {\n    return (\n        <>\n            <tr>\n                <td>\n                    <p className=\"transaction-date\">{transaction.date}</p>{\" \"}\n                    <p className=\"transaction-time\">{transaction.time}</p>\n                </td>\n                <td>\n                    {transaction.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport SelectOptions from './SelectOptions';\nimport Button from './Button';\nimport UserInfoCard from './UserInfoCard';\nimport TransactionRow3 from './TransactionRow3';\n\nconst Deposit = ({ currentUser, users, deposit, isAdmin, transactions }) => {\n    const nonAdminUsers = users.filter((user) => !user.isAdmin);\n\n    function renderSelectOptions() {\n        const rows = [];\n        for (let i = 0; i < nonAdminUsers.length; i++) {\n            rows.push(\n                <SelectOptions\n                    key={nonAdminUsers[i].accountNo}\n                    client={nonAdminUsers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const amountRef = useRef();\n    const accountRef = useRef();\n\n    const [message, setMessage] = useState(null);\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    const accountNos = users.map((user) => user.accountNo);\n    const index = accountNos.findIndex(\n        (accountNo) => parseInt(accountNo) === 111111\n    );\n    const juanbalance = users[index].balance;\n\n    const [displayBalance, setDisplayBalance] = useState(juanbalance);\n\n    function handleChange(userToDisplay) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const index = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(userToDisplay)\n        );\n\n        setDisplayBalance(userCopy[index].balance);\n    }\n\n    const deposits = transactions.filter(\n        (transaction) =>\n            transaction.type === 'deposit' &&\n            transaction.accountNo === currentUser.accountNo\n    );\n\n    function renderHistory() {\n        const rows = [];\n        for (let i = 0; i < deposits.length; i++) {\n            rows.push(\n                <TransactionRow3\n                    key={deposits[i].key}\n                    transaction={deposits[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const [displayHistory, setDisplayHistory] = useState(false);\n\n    function checkTransactions() {\n        const deposits = transactions.filter(\n            (transaction) =>\n                transaction.type === 'deposit' &&\n                transaction.accountNo === currentUser.accountNo\n        );\n\n        if (deposits.length > 0) {\n            setDisplayHistory(true);\n        } else {\n            setDisplayHistory(false);\n        }\n    }\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [transactions]);\n\n    if (isAdmin) {\n        return (\n            <>\n                <div className='card-container'>\n                    <div className='main-header'>\n                        <h1 className='main-title'>Deposit</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const account = accountRef.current.value;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    'Please enter an amount greater than 0.'\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage('Please enter an amount.');\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    deposit(amount, account);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Depositing ${amount.toLocaleString(\n                                        'en-US',\n                                        {\n                                            style: 'currency',\n                                            currency: 'PHP',\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className='transaction-form'>\n                            <label>\n                                <div className='input-label'>Account</div>\n                                <select\n                                    className='input-field'\n                                    ref={accountRef}\n                                    onChange={(e) => {\n                                        handleChange(e.target.value);\n                                    }}\n                                >\n                                    {renderSelectOptions()}\n                                </select>\n                                <div className='current-balance'>\n                                    Current Balance:{' '}\n                                    {displayBalance.toLocaleString('en-US', {\n                                        style: 'currency',\n                                        currency: 'PHP',\n                                    })}\n                                </div>\n                            </label>\n\n                            <label>\n                                <div className='input-label'>Amount (₱)</div>\n\n                                <input\n                                    className='input-field'\n                                    type='number'\n                                    ref={amountRef}\n                                    step='.01'\n                                />\n                            </label>\n                        </div>\n\n                        <Button className='main-button' text='Deposit' />\n                    </form>\n                </div>\n                {message !== null ? (\n                    <div className='error-box'>{message}</div>\n                ) : (\n                    ''\n                )}\n                {loadingMessage !== null ? (\n                    <div className='loading-box'>{loadingMessage}</div>\n                ) : null}\n            </>\n        );\n    } else {\n        return (\n            <>\n                <UserInfoCard currentUser={currentUser} />\n\n                <br />\n                <br />\n\n                <div className='card-container'>\n                    <div className='main-header'>\n                        <h1 className='main-title'>Deposit</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const account = currentUser.accountNo;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    'Please enter an amount greater than 0.'\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage('Please enter an amount.');\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    deposit(amount, account);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Depositing ${amount.toLocaleString(\n                                        'en-US',\n                                        {\n                                            style: 'currency',\n                                            currency: 'PHP',\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className='user-transaction-form'>\n                            <label>\n                                <div className='input-label'>Amount (₱)</div>\n                                <input\n                                    className='input-field'\n                                    type='number'\n                                    ref={amountRef}\n                                    step='.01'\n                                />\n                            </label>\n                        </div>\n\n                        <Button className='main-button' text='Deposit' />\n                    </form>\n                </div>\n\n                {message !== null ? (\n                    <div className='error-box'>{message}</div>\n                ) : (\n                    ''\n                )}\n                {loadingMessage !== null ? (\n                    <div className='loading-box'>{loadingMessage}</div>\n                ) : null}\n\n                <br />\n                <br />\n\n                <div className='card-container'>\n                    <div className='main-header'>\n                        <h1 className='main-title'>\n                            {displayHistory\n                                ? 'Deposit History'\n                                : 'No Existing Deposits'}\n                        </h1>\n                    </div>\n                    {displayHistory ? (\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>{renderHistory()}</tbody>\n                        </table>\n                    ) : null}\n                </div>\n            </>\n        );\n    }\n};\n\nexport default Deposit;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport SelectOptions from \"./SelectOptions\";\nimport Button from \"./Button\";\nimport UserInfoCard from \"./UserInfoCard\";\nimport TransactionRow3 from \"./TransactionRow3\";\n\nconst Withdraw = ({ currentUser, users, withdraw, isAdmin, transactions }) => {\n    const nonAdminUsers = users.filter((user) => !user.isAdmin);\n\n    function renderSelectOptions() {\n        const rows = [];\n        for (let i = 0; i < nonAdminUsers.length; i++) {\n            rows.push(\n                <SelectOptions\n                    key={nonAdminUsers[i].accountNo}\n                    client={nonAdminUsers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const amountRef = useRef();\n    const accountRef = useRef();\n\n    const [message, setMessage] = useState(null);\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    const accountNos = users.map((user) => user.accountNo);\n    const index = accountNos.findIndex(\n        (accountNo) => parseInt(accountNo) === 111111\n    );\n    const juanbalance = users[index].balance;\n\n    const [displayBalance, setDisplayBalance] = useState(juanbalance);\n\n    function handleChange(userToDisplay) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const index = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(userToDisplay)\n        );\n\n        setDisplayBalance(userCopy[index].balance);\n    }\n\n    const withdrawals = transactions.filter(\n        (transaction) =>\n            transaction.type === \"withdrawal\" &&\n            transaction.accountNo === currentUser.accountNo\n    );\n\n    function renderHistory() {\n        const rows = [];\n        for (let i = 0; i < withdrawals.length; i++) {\n            rows.push(\n                <TransactionRow3\n                    key={withdrawals[i].key}\n                    transaction={withdrawals[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const [displayHistory, setDisplayHistory] = useState(false);\n\n    function checkTransactions() {\n        const withdrawals = transactions.filter(\n            (transaction) =>\n                transaction.type === \"withdrawal\" &&\n                transaction.accountNo === currentUser.accountNo\n        );\n\n        if (withdrawals.length > 0) {\n            setDisplayHistory(true);\n        } else {\n            setDisplayHistory(false);\n        }\n    }\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [transactions]);\n\n    if (isAdmin) {\n        return (\n            <>\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">Withdraw</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const account = accountRef.current.value;\n\n                            const accountNos = users.map(\n                                (user) => user.accountNo\n                            );\n                            const accountIndex = accountNos.findIndex(\n                                (accountNo) =>\n                                    parseInt(accountNo) === parseInt(account)\n                            );\n                            const accountBalance = users[accountIndex].balance;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    \"Please enter an amount greater than 0.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage(\"Please enter an amount.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (accountBalance < amount) {\n                                setMessage(\"Insufficient funds.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    withdraw(amount, account);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Withdrawing ${amount.toLocaleString(\n                                        \"en-US\",\n                                        {\n                                            style: \"currency\",\n                                            currency: \"PHP\",\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className=\"transaction-form\">\n                            <div className=\"account-selection-info\">\n                                <label>\n                                    <div className=\"input-label\">Account</div>\n                                    <select\n                                        className=\"input-field\"\n                                        ref={accountRef}\n                                        onChange={(e) => {\n                                            handleChange(e.target.value);\n                                        }}\n                                    >\n                                        {renderSelectOptions()}\n                                    </select>\n                                </label>\n                                <div className=\"current-balance\">\n                                    Current Balance:{\" \"}\n                                    {displayBalance.toLocaleString(\"en-US\", {\n                                        style: \"currency\",\n                                        currency: \"PHP\",\n                                    })}\n                                </div>\n                            </div>\n                            <label>\n                                <div className=\"input-label\">Amount (₱)</div>\n                                <input\n                                    className=\"input-field\"\n                                    type=\"number\"\n                                    ref={amountRef}\n                                    step=\".01\"\n                                />\n                            </label>\n                        </div>\n\n                        <Button className=\"main-button\" text=\"Withdraw\" />\n                    </form>\n                </div>\n                {message !== null ? (\n                    <div className=\"error-box\">{message}</div>\n                ) : (\n                    \"\"\n                )}\n                {loadingMessage !== null ? (\n                    <div className=\"loading-box\">{loadingMessage}</div>\n                ) : null}\n            </>\n        );\n    } else {\n        return (\n            <>\n                <UserInfoCard currentUser={currentUser} />\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">Withdraw</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const account = currentUser.accountNo;\n\n                            const accountNos = users.map(\n                                (user) => user.accountNo\n                            );\n                            const accountIndex = accountNos.findIndex(\n                                (accountNo) =>\n                                    parseInt(accountNo) === parseInt(account)\n                            );\n                            const accountBalance = users[accountIndex].balance;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    \"Please enter an amount greater than 0.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage(\"Please enter an amount.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (accountBalance < amount) {\n                                setMessage(\"Insufficient funds.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    withdraw(amount, account);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Withdrawing ${amount.toLocaleString(\n                                        \"en-US\",\n                                        {\n                                            style: \"currency\",\n                                            currency: \"PHP\",\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className=\"user-transaction-form\">\n                            <label>\n                                <div className=\"input-label\">Amount (₱)</div>\n                                <input\n                                    className=\"input-field\"\n                                    type=\"number\"\n                                    ref={amountRef}\n                                    step=\".01\"\n                                />\n                            </label>\n                        </div>\n\n                        <Button className=\"main-button\" text=\"Withdraw\" />\n                    </form>\n                </div>\n\n                {message !== null ? (\n                    <div className=\"error-box\">{message}</div>\n                ) : (\n                    \"\"\n                )}\n                {loadingMessage !== null ? (\n                    <div className=\"loading-box\">{loadingMessage}</div>\n                ) : null}\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">\n                            {displayHistory\n                                ? \"Withdrawal History\"\n                                : \"No Existing Withdrawals\"}\n                        </h1>\n                    </div>\n                    {displayHistory ? (\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>{renderHistory()}</tbody>\n                        </table>\n                    ) : null}\n                </div>\n            </>\n        );\n    }\n};\n\nexport default Withdraw;\n","import React from \"react\";\n\nexport default function TransactionRow4({ transaction }) {\n    return (\n        <>\n            <tr>\n                <td>\n                    <p className=\"transaction-date\">{transaction.date}</p>\n                    <p className=\"transaction-time\">{transaction.time}</p>\n                </td>\n                <td>\n                    {transaction.toFirstName} {transaction.toLastName}\n                    <p className=\"account-number\">{transaction.to}</p>\n                </td>\n\n                <td>\n                    {transaction.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React, { useRef, useState, useEffect } from \"react\";\nimport SelectOptions from \"./SelectOptions\";\nimport Button from \"./Button\";\nimport UserInfoCard from \"./UserInfoCard\";\nimport TransactionRow4 from \"./TransactionRow4\";\n\nconst Transfer = ({ currentUser, users, transfer, isAdmin, transactions }) => {\n    const nonAdminUsers = users.filter(\n        (user) => !user.isAdmin && user !== currentUser\n    );\n\n    function renderSelectOptions() {\n        const rows = [];\n        for (let i = 0; i < nonAdminUsers.length; i++) {\n            rows.push(\n                <SelectOptions\n                    key={nonAdminUsers[i].accountNo}\n                    client={nonAdminUsers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const amountRef = useRef();\n    const fromRef = useRef();\n    const toRef = useRef();\n\n    const [message, setMessage] = useState(null);\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    const accountNos = users.map((user) => user.accountNo);\n    const index = accountNos.findIndex(\n        (accountNo) => parseInt(accountNo) === 111111\n    );\n    const juanbalance = users[index].balance;\n\n    const [displayBalance1, setDisplayBalance1] = useState(juanbalance);\n    const [displayBalance2, setDisplayBalance2] = useState(juanbalance);\n\n    function handleChange(userToDisplay, n) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const index = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(userToDisplay)\n        );\n        n === 1\n            ? setDisplayBalance1(userCopy[index].balance)\n            : setDisplayBalance2(userCopy[index].balance);\n    }\n\n    const transfers = transactions.filter(\n        (transaction) =>\n            transaction.type === \"transfer\" &&\n            transaction.from === currentUser.accountNo\n    );\n\n    function renderHistory() {\n        const rows = [];\n        for (let i = 0; i < transfers.length; i++) {\n            rows.push(\n                <TransactionRow4\n                    key={transfers[i].key}\n                    transaction={transfers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const [displayHistory, setDisplayHistory] = useState(false);\n\n    function checkTransactions() {\n        const transfers = transactions.filter(\n            (transaction) =>\n                transaction.type === \"transfer\" &&\n                transaction.from === currentUser.accountNo\n        );\n\n        if (transfers.length > 0) {\n            setDisplayHistory(true);\n        } else {\n            setDisplayHistory(false);\n        }\n    }\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [transactions]);\n\n    if (isAdmin) {\n        return (\n            <>\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">Transfer</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const from = fromRef.current.value;\n                            const to = toRef.current.value;\n\n                            const accountNos = users.map(\n                                (user) => user.accountNo\n                            );\n                            const fromIndex = accountNos.findIndex(\n                                (accountNo) =>\n                                    parseInt(accountNo) === parseInt(from)\n                            );\n                            const fromBalance = users[fromIndex].balance;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    \"Please enter an amount greater than 0.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage(\"Please enter an amount.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (from === to) {\n                                setMessage(\n                                    \"Cannot transfer to the same account.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (fromBalance < amount) {\n                                setMessage(\"Insufficient funds.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    transfer(amount, from, to);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Transferring ${amount.toLocaleString(\n                                        \"en-US\",\n                                        {\n                                            style: \"currency\",\n                                            currency: \"PHP\",\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className=\"transaction-form\">\n                            <label>\n                                <div className=\"input-label\">From</div>\n                                <select\n                                    className=\"input-field\"\n                                    onChange={(e) => {\n                                        handleChange(e.target.value, 1);\n                                    }}\n                                    ref={fromRef}\n                                >\n                                    {renderSelectOptions()}\n                                </select>\n                                <div className=\"current-balance\">\n                                    Current Balance:{\" \"}\n                                    {displayBalance1.toLocaleString(\"en-US\", {\n                                        style: \"currency\",\n                                        currency: \"PHP\",\n                                    })}\n                                </div>\n                            </label>\n\n                            <label>\n                                <div className=\"input-label\">To</div>\n                                <select\n                                    className=\"input-field\"\n                                    onChange={(e) => {\n                                        handleChange(e.target.value, 2);\n                                    }}\n                                    ref={toRef}\n                                >\n                                    {renderSelectOptions()}\n                                </select>\n                                <div className=\"current-balance\">\n                                    Current Balance:{\" \"}\n                                    {displayBalance2.toLocaleString(\"en-US\", {\n                                        style: \"currency\",\n                                        currency: \"PHP\",\n                                    })}\n                                </div>\n                            </label>\n\n                            <label>\n                                <div className=\"input-label\">Amount (₱)</div>\n                                <input\n                                    className=\"input-field\"\n                                    type=\"number\"\n                                    ref={amountRef}\n                                    step=\".01\"\n                                />\n                            </label>\n                            <br />\n                        </div>\n                        <Button className=\"main-button\" text=\"Transfer\" />\n                    </form>\n                </div>\n                {message !== null ? (\n                    <div className=\"error-box\">{message}</div>\n                ) : (\n                    \"\"\n                )}\n                {loadingMessage !== null ? (\n                    <div className=\"loading-box\">{loadingMessage}</div>\n                ) : null}\n            </>\n        );\n    } else {\n        return (\n            <>\n                <UserInfoCard currentUser={currentUser} />\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">Transfer</h1>\n                    </div>\n\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const amount = parseFloat(amountRef.current.value);\n                            const from = currentUser.accountNo;\n                            const to = toRef.current.value;\n\n                            const accountNos = users.map(\n                                (user) => user.accountNo\n                            );\n                            const fromIndex = accountNos.findIndex(\n                                (accountNo) =>\n                                    parseInt(accountNo) === parseInt(from)\n                            );\n                            const fromBalance = users[fromIndex].balance;\n\n                            if (amount <= 0) {\n                                setMessage(\n                                    \"Please enter an amount greater than 0.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (!amount) {\n                                setMessage(\"Please enter an amount.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (from === to) {\n                                setMessage(\n                                    \"Cannot transfer to the same account.\"\n                                );\n                                setTimeout(() => setMessage(null), 2000);\n                            } else if (fromBalance < amount) {\n                                setMessage(\"Insufficient funds.\");\n                                setTimeout(() => setMessage(null), 2000);\n                            } else {\n                                setTimeout(() => {\n                                    transfer(amount, from, to);\n                                }, 1500);\n                                setLoadingMessage(\n                                    `Transferring ${amount.toLocaleString(\n                                        \"en-US\",\n                                        {\n                                            style: \"currency\",\n                                            currency: \"PHP\",\n                                        }\n                                    )}...`\n                                );\n                                // setTimeout(() => setLoadingMessage(null), 2000);\n                            }\n                        }}\n                    >\n                        <div className=\"transaction-form\">\n                            <label>\n                                <div className=\"input-label\">To</div>\n                                <select\n                                    className=\"input-field\"\n                                    onChange={(e) => {\n                                        handleChange(e.target.value, 2);\n                                    }}\n                                    ref={toRef}\n                                >\n                                    {renderSelectOptions()}\n                                </select>\n                                <div className=\"current-balance\">\n                                    Current Balance:{\" \"}\n                                    {displayBalance2.toLocaleString(\"en-US\", {\n                                        style: \"currency\",\n                                        currency: \"PHP\",\n                                    })}\n                                </div>\n                            </label>\n\n                            <label>\n                                <div className=\"input-label\">Amount (₱)</div>\n                                <input\n                                    className=\"input-field\"\n                                    type=\"number\"\n                                    ref={amountRef}\n                                    step=\".01\"\n                                />\n                            </label>\n                        </div>\n                        <Button className=\"main-button\" text=\"Transfer\" />\n                    </form>\n                </div>\n                {message !== null ? (\n                    <div className=\"error-box\">{message}</div>\n                ) : (\n                    \"\"\n                )}\n                {loadingMessage !== null ? (\n                    <div className=\"loading-box\">{loadingMessage}</div>\n                ) : null}\n\n                <br />\n                <br />\n\n                <div className=\"card-container\">\n                    <div className=\"main-header\">\n                        <h1 className=\"main-title\">\n                            {displayHistory\n                                ? \"Transfer History\"\n                                : \"No Existing Transfers\"}\n                        </h1>\n                    </div>\n                    {displayHistory ? (\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Receiver</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>{renderHistory()}</tbody>\n                        </table>\n                    ) : null}\n                </div>\n            </>\n        );\n    }\n};\n\nexport default Transfer;\n","import React from \"react\";\n\nexport default function TransactionRow1({ transaction }) {\n    return (\n        <>\n            <tr>\n                <td>\n                    <p className=\"transaction-date\">{transaction.date}</p>{\" \"}\n                    <p className=\"transaction-time\">{transaction.time}</p>\n                </td>\n                <td>\n                    {transaction.firstName} {transaction.lastName}{\" \"}\n                    <p className=\"account-number\">{transaction.accountNo}</p>\n                </td>\n                <td>\n                    {transaction.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React from \"react\";\n\nexport default function TransactionRow2({ transaction }) {\n    return (\n        <>\n            <tr>\n                <td>\n                    <p className=\"transaction-date\">{transaction.date}</p>\n                    <p className=\"transaction-time\">{transaction.time}</p>\n                </td>\n                <td>\n                    {transaction.fromFirstName} {transaction.fromLastName}\n                    <p className=\"account-number\">{transaction.from}</p>\n                </td>\n\n                <td>\n                    {transaction.toFirstName} {transaction.toLastName}\n                    <p className=\"account-number\">{transaction.to}</p>\n                </td>\n\n                <td>\n                    {transaction.amount.toLocaleString(\"en-US\", {\n                        style: \"currency\",\n                        currency: \"PHP\",\n                    })}\n                </td>\n            </tr>\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport TransactionRow1 from \"./TransactionRow1\";\nimport TransactionRow2 from \"./TransactionRow2\";\n\nexport default function Transactions({ transactions }) {\n    const deposits = transactions.filter(\n        (transaction) => transaction.type === \"deposit\"\n    );\n    const withdrawals = transactions.filter(\n        (transaction) => transaction.type === \"withdrawal\"\n    );\n    const transfers = transactions.filter(\n        (transaction) => transaction.type === \"transfer\"\n    );\n\n    function renderDeposits() {\n        const rows = [];\n        for (let i = 0; i < deposits.length; i++) {\n            rows.push(\n                <TransactionRow1\n                    key={deposits[i].key}\n                    transaction={deposits[i]}\n                />\n            );\n        }\n        return rows;\n    }\n    function renderWithdrawals() {\n        const rows = [];\n        for (let i = 0; i < withdrawals.length; i++) {\n            rows.push(\n                <TransactionRow1\n                    key={withdrawals[i].key}\n                    transaction={withdrawals[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    const [displayDeposits, setDisplayDeposits] = useState(false);\n    const [displayWithdrawals, setDisplayWithdrawals] = useState(false);\n    const [displayTransfers, setDisplayTransfers] = useState(false);\n\n    function checkTransactions() {\n        const deposits = transactions.filter(\n            (transaction) => transaction.type === \"deposit\"\n        );\n        const withdrawals = transactions.filter(\n            (transaction) => transaction.type === \"withdrawal\"\n        );\n        const transfers = transactions.filter(\n            (transaction) => transaction.type === \"transfer\"\n        );\n\n        if (deposits.length > 0) {\n            setDisplayDeposits(true);\n        } else {\n            setDisplayDeposits(false);\n        }\n        if (withdrawals.length > 0) {\n            setDisplayWithdrawals(true);\n        } else {\n            setDisplayWithdrawals(false);\n        }\n        if (transfers.length > 0) {\n            setDisplayTransfers(true);\n        } else {\n            setDisplayTransfers(false);\n        }\n    }\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        let mounted = true;\n\n        if (mounted) {\n            checkTransactions();\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [transactions]);\n\n    function renderTransfers() {\n        const rows = [];\n        for (let i = 0; i < transfers.length; i++) {\n            rows.push(\n                <TransactionRow2\n                    key={transfers[i].key}\n                    transaction={transfers[i]}\n                />\n            );\n        }\n        return rows;\n    }\n\n    return (\n        <div>\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        {displayDeposits ? \"Deposits\" : \"No Existing Deposits\"}\n                    </h1>\n                </div>\n                {displayDeposits ? (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Account</th>\n                                <th>Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>{renderDeposits()}</tbody>\n                    </table>\n                ) : null}\n            </div>\n            <br />\n            <br />\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        {displayWithdrawals\n                            ? \"Withdrawals\"\n                            : \"No Existing Withdrawals\"}\n                    </h1>\n                </div>\n                {displayWithdrawals ? (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Account</th>\n                                <th>Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>{renderWithdrawals()}</tbody>\n                    </table>\n                ) : null}\n            </div>\n            <br />\n            <br />\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        {displayTransfers\n                            ? \"Transfers\"\n                            : \"No Existing Transfers\"}\n                    </h1>\n                </div>\n                {displayTransfers ? (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Sender</th>\n                                <th>Receiver</th>\n                                <th>Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>{renderTransfers()}</tbody>\n                    </table>\n                ) : null}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function SettingsSelect({ client }) {\n    return (\n        <>\n            <option value={client.accountNo}>\n                {client.firstName} {client.lastName}\n            </option>\n        </>\n    );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport SettingsSelect from './SettingsSelect';\nimport { useState, useRef } from 'react';\nimport Button from './Button';\n\nconst Settings = ({\n    LogoutFunction,\n    users,\n    editUser,\n    isAdmin,\n    currentUser,\n}) => {\n    function renderSelectOptions() {\n        const options = [];\n        for (let i = 0; i < users.length; i++) {\n            if (users[i].accountNo) {\n                options.push(\n                    <SettingsSelect\n                        key={users[i].accountNo}\n                        client={users[i]}\n                    />\n                );\n            }\n        }\n        return options;\n    }\n\n    const [error, setError] = useState(null);\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    // const usernameRef = useRef();\n    // const newUsernameRef = useRef();\n    // const newPasswordRef = useRef();\n    // const newPasswordRef2 = useRef();\n\n    const [clientSideFirstName, setClientSideFirstName] = useState(\n        currentUser.firstName\n    );\n    const [clientSideLastName, setClientSideLastName] = useState(\n        currentUser.lastName\n    );\n    const [clientSideUsername, setClientSideUsername] = useState(\n        currentUser.username\n    );\n    const [clientSidePassword, setClientSidePassword] = useState(\n        currentUser.password\n    );\n    const [clientSideConfirmPassword, setClientSideConfirmPassword] = useState(\n        currentUser.password\n    );\n\n    const [adminSideDisplayUser, setAdminSideDisplayUser] = useState(users[1]);\n\n    const [adminSideFirstName, setAdminSideFirstName] = useState(\n        users[1].firstName\n    );\n    const [adminSideLastName, setAdminSideLastName] = useState(\n        users[1].lastName\n    );\n    const [adminSideUsername, setAdminSideUsername] = useState(\n        users[1].username\n    );\n    const [adminSidePassword, setAdminSidePassword] = useState(\n        users[1].password\n    );\n    const [adminSideConfirmPassword, setAdminSideConfirmPassword] = useState(\n        users[1].password\n    );\n\n    function handleChange(userToDisplay) {\n        const accountNos = users.map((user) => user.accountNo);\n        const index = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(userToDisplay)\n        );\n        const user = users[index];\n        setAdminSideDisplayUser(user);\n        setAdminSideFirstName(user.firstName);\n        setAdminSideLastName(user.lastName);\n        setAdminSideUsername(user.username);\n        setAdminSidePassword(user.password);\n        setAdminSideConfirmPassword(user.password);\n    }\n\n    // if (isAdmin) {\n    //     return (\n    //         <>\n    //             <div className=\"card-container\">\n    //                 <div className=\"main-header\">\n    //                     <h1 className=\"main-title\">Edit users</h1>\n    //                 </div>\n    //                 <form\n    //                     onSubmit={(e) => {\n    //                         e.preventDefault();\n\n    //                         const username = usernameRef.current.value;\n    //                         const newUsername = newUsernameRef.current.value;\n    //                         const newPassword = newPasswordRef.current.value;\n    //                         const newPassword2 = newPasswordRef2.current.value;\n\n    //                         if (\n    //                             !username ||\n    //                             !newUsername ||\n    //                             !newPassword ||\n    //                             !newPassword2\n    //                         ) {\n    //                             setError(\"Please fill out all fields.\");\n    //                             setTimeout(() => setError(null), 2000);\n    //                         } else if (newPassword === newPassword2) {\n    //                             setTimeout(() => {\n    //                                 editUser(\n    //                                     username,\n    //                                     newUsername,\n    //                                     newPassword\n    //                                 );\n    //                             }, 2000);\n    //                             newUsernameRef.current.value = null;\n    //                             newPasswordRef.current.value = null;\n    //                             newPasswordRef2.current.value = null;\n    //                             setLoadingMessage(\"Changing details...\");\n    //                             setTimeout(() => setLoadingMessage(null), 4000);\n    //                         } else {\n    //                             setError(\"Passwords do not match. Try again.\");\n    //                             setTimeout(() => setError(null), 2000);\n    //                             newUsernameRef.current.value = null;\n    //                             newPasswordRef.current.value = \"\";\n    //                             newPasswordRef2.current.value = \"\";\n    //                         }\n    //                     }}\n    //                 >\n    //                     <div className=\"transaction-form\">\n    //                         <label>\n    //                             <div className=\"input-label\">Select a user</div>\n    //                             <select\n    //                                 className=\"input-field\"\n    //                                 ref={usernameRef}\n    //                             >\n    //                                 {renderSelectOptions()}\n    //                             </select>\n    //                         </label>\n    //                         <label>\n    //                             <div className=\"input-label\">New username</div>\n    //                             <input\n    //                                 className=\"input-field\"\n    //                                 ref={newUsernameRef}\n    //                                 type=\"text\"\n    //                             />\n    //                         </label>\n    //                         <label>\n    //                             <div className=\"input-label\">New password</div>\n    //                             <input\n    //                                 className=\"input-field\"\n    //                                 ref={newPasswordRef}\n    //                                 type=\"password\"\n    //                             />\n    //                         </label>\n    //                         <label>\n    //                             <div className=\"input-label\">\n    //                                 Confirm new password\n    //                             </div>\n    //                             <input\n    //                                 className=\"input-field\"\n    //                                 ref={newPasswordRef2}\n    //                                 type=\"password\"\n    //                             />\n    //                         </label>\n    //                     </div>\n    //                     <Button className=\"main-button\" text=\"Submit\" />\n    //                 </form>\n    //             </div>\n    //             {error !== null ? (\n    //                 <div className=\"error-box\">{error}</div>\n    //             ) : null}\n    //             {loadingMessage !== null ? (\n    //                 <div className=\"loading-box\">{loadingMessage}</div>\n    //             ) : null}\n    //             <br />\n    //             <hr />\n\n    //             <div className=\"option-container\">\n    //                 <NavLink to=\"/help\" exact className=\"logout-button\">\n    //                     <div className=\"logout-button-content\">\n    //                         <span className=\"material-icons logout-icon\">\n    //                             help\n    //                         </span>\n    //                         <span>Help</span>\n    //                     </div>\n    //                 </NavLink>\n    //                 <NavLink\n    //                     to=\"/\"\n    //                     exact\n    //                     className=\"logout-button\"\n    //                     onClick={() => {\n    //                         LogoutFunction();\n    //                     }}\n    //                 >\n    //                     <div className=\"logout-button-content\">\n    //                         <span className=\"material-icons logout-icon\">\n    //                             logout\n    //                         </span>\n    //                         <span>Logout</span>\n    //                     </div>\n    //                 </NavLink>\n    //             </div>\n    //         </>\n    //     );\n    // } else {\n\n    return (\n        <>\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        {isAdmin ? 'Admin' : 'User'} Account Details\n                    </h1>\n                </div>\n\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n\n                        if (\n                            (!isAdmin &&\n                                (clientSideFirstName.length < 1 ||\n                                    clientSideLastName.length < 1 ||\n                                    clientSideUsername.length < 1 ||\n                                    clientSidePassword.length < 1 ||\n                                    clientSideConfirmPassword.length < 1)) ||\n                            (isAdmin &&\n                                (clientSideFirstName.length < 1 ||\n                                    clientSideUsername.length < 1 ||\n                                    clientSidePassword.length < 1 ||\n                                    clientSideConfirmPassword.length < 1))\n                        ) {\n                            setError('Please fill out all fields.');\n                            setTimeout(() => setError(null), 2000);\n                        } else if (\n                            clientSidePassword === clientSideConfirmPassword\n                        ) {\n                            setTimeout(() => {\n                                editUser(\n                                    currentUser.accountNo,\n                                    clientSideFirstName.toUpperCase(),\n                                    clientSideLastName.toUpperCase(),\n                                    clientSideUsername,\n                                    clientSidePassword\n                                );\n                            }, 2000);\n                            setLoadingMessage('Changing details...');\n                        } else {\n                            setError('Passwords do not match. Try again.');\n                            setTimeout(() => setError(null), 2000);\n                        }\n                    }}\n                >\n                    <div className=\"form-input-container\">\n                        <label>\n                            <div className=\"input-label\">First Name</div>\n                            <input\n                                className=\"input-field\"\n                                type=\"text\"\n                                value={clientSideFirstName}\n                                onChange={(e) => {\n                                    setClientSideFirstName(e.target.value);\n                                }}\n                            />\n                        </label>\n                        <label>\n                            <div className=\"input-label\">Last Name</div>\n                            <input\n                                className=\"input-field\"\n                                type=\"text\"\n                                value={clientSideLastName}\n                                onChange={(e) => {\n                                    setClientSideLastName(e.target.value);\n                                }}\n                            />\n                        </label>\n                        <label>\n                            <div className=\"input-label\">Username</div>\n                            <input\n                                className=\"input-field\"\n                                type=\"text\"\n                                value={clientSideUsername}\n                                onChange={(e) => {\n                                    setClientSideUsername(e.target.value);\n                                }}\n                            />\n                        </label>\n                        <label>\n                            <div className=\"input-label\">Password</div>\n                            <input\n                                className=\"input-field\"\n                                type=\"password\"\n                                value={clientSidePassword}\n                                onChange={(e) => {\n                                    setClientSidePassword(e.target.value);\n                                }}\n                            />\n                        </label>\n                        <label>\n                            <div className=\"input-label\">Confirm Password</div>\n                            <input\n                                className=\"input-field\"\n                                type=\"password\"\n                                value={clientSideConfirmPassword}\n                                onChange={(e) => {\n                                    setClientSideConfirmPassword(\n                                        e.target.value\n                                    );\n                                }}\n                            />\n                        </label>\n                    </div>\n                    <Button className=\"main-button\" text=\"Edit\" />\n                </form>\n            </div>\n\n            {isAdmin ? (\n                <>\n                    <br />\n                    <br />\n                    <div className=\"card-container\">\n                        <div className=\"main-header\">\n                            <h1 className=\"main-title\">Edit User Accounts</h1>\n                        </div>\n\n                        <form\n                            onSubmit={(e) => {\n                                e.preventDefault();\n\n                                if (\n                                    adminSideFirstName.length < 1 ||\n                                    adminSideLastName.length < 1 ||\n                                    adminSideUsername.length < 1 ||\n                                    adminSidePassword.length < 1 ||\n                                    adminSideConfirmPassword.length < 1\n                                ) {\n                                    setError('Please fill out all fields.');\n                                    setTimeout(() => setError(null), 2000);\n                                } else if (\n                                    adminSidePassword ===\n                                    adminSideConfirmPassword\n                                ) {\n                                    setTimeout(() => {\n                                        editUser(\n                                            adminSideDisplayUser.accountNo,\n                                            adminSideFirstName.toUpperCase(),\n                                            adminSideLastName.toUpperCase(),\n                                            adminSideUsername,\n                                            adminSidePassword\n                                        );\n                                    }, 2000);\n                                    setLoadingMessage('Changing details...');\n                                } else {\n                                    setError(\n                                        'Passwords do not match. Try again.'\n                                    );\n                                    setTimeout(() => setError(null), 2000);\n                                }\n                            }}\n                        >\n                            <div className=\"transaction-form\">\n                                <label>\n                                    <div className=\"input-label\">\n                                        Select a user\n                                    </div>\n                                    <select\n                                        className=\"input-field\"\n                                        onChange={(e) => {\n                                            handleChange(e.target.value);\n                                        }}\n                                    >\n                                        {renderSelectOptions()}\n                                    </select>\n                                </label>\n\n                                <label>\n                                    <div className=\"input-label\">\n                                        First Name\n                                    </div>\n                                    <input\n                                        className=\"input-field\"\n                                        type=\"text\"\n                                        value={adminSideFirstName}\n                                        onChange={(e) => {\n                                            setAdminSideFirstName(\n                                                e.target.value\n                                            );\n                                        }}\n                                    />\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Last Name</div>\n                                    <input\n                                        className=\"input-field\"\n                                        type=\"text\"\n                                        value={adminSideLastName}\n                                        onChange={(e) => {\n                                            setAdminSideLastName(\n                                                e.target.value\n                                            );\n                                        }}\n                                    />\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Username</div>\n                                    <input\n                                        className=\"input-field\"\n                                        type=\"text\"\n                                        value={adminSideUsername}\n                                        onChange={(e) => {\n                                            setAdminSideUsername(\n                                                e.target.value\n                                            );\n                                        }}\n                                    />\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">Password</div>\n                                    <input\n                                        className=\"input-field\"\n                                        type=\"password\"\n                                        value={adminSidePassword}\n                                        onChange={(e) => {\n                                            setAdminSidePassword(\n                                                e.target.value\n                                            );\n                                        }}\n                                    />\n                                </label>\n                                <label>\n                                    <div className=\"input-label\">\n                                        Confirm Password\n                                    </div>\n                                    <input\n                                        className=\"input-field\"\n                                        type=\"password\"\n                                        value={adminSideConfirmPassword}\n                                        onChange={(e) => {\n                                            setAdminSideConfirmPassword(\n                                                e.target.value\n                                            );\n                                        }}\n                                    />\n                                </label>\n                            </div>\n                            <Button className=\"main-button\" text=\"Edit\" />\n                        </form>\n                    </div>\n                </>\n            ) : null}\n\n            {error !== null ? <div className=\"error-box\">{error}</div> : null}\n            {loadingMessage !== null ? (\n                <div className=\"loading-box\">{loadingMessage}</div>\n            ) : null}\n            <br />\n            <hr />\n\n            <div className=\"option-container\">\n                <NavLink to=\"/banking-app/help\" exact className=\"logout-button\">\n                    <div className=\"logout-button-content\">\n                        <span className=\"material-icons logout-icon\">help</span>\n                        <span>Help</span>\n                    </div>\n                </NavLink>\n                <NavLink\n                    to=\"/banking-app\"\n                    exact\n                    className=\"logout-button\"\n                    onClick={() => {\n                        LogoutFunction();\n                    }}\n                >\n                    <div className=\"logout-button-content\">\n                        <span className=\"material-icons logout-icon\">\n                            logout\n                        </span>\n                        <span>Logout</span>\n                    </div>\n                </NavLink>\n            </div>\n        </>\n    );\n};\n// };\n\nexport default Settings;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Help = () => {\n    return (\n        <>\n            <div className=\"faq-header\">\n                <NavLink\n                    to=\"/banking-app/settings\"\n                    exact\n                    className=\"close-button\"\n                >\n                    <div className=\"logout-button-content\">\n                        <span className=\"material-icons logout-icon\">\n                            close\n                        </span>\n                    </div>\n                </NavLink>\n                <h3 className=\"faq-title\">Frequently Asked Questions</h3>\n            </div>\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        What does <span className=\"name-logo\">banque.</span> do\n                        with my money?\n                    </h1>\n                </div>\n                <br />\n                <p className=\"faq-answer\">\n                    Money is just a social construct. It has no intrinsic value.\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                    Nunc a nisl molestie, pretium eros sit amet, sollicitudin\n                    risus. Etiam finibus non libero et faucibus. Aliquam eu\n                    neque eu arcu ultrices placerat. Phasellus nec malesuada\n                    elit. Sed eu nibh enim.\n                </p>\n            </div>\n            <br />\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        What are the fees when transacting with{' '}\n                        <span className=\"name-logo\">banque.</span>?\n                    </h1>\n                </div>\n                <br />\n                <p className=\"faq-answer\">\n                    <span className=\"name-logo\">banque.</span> does not charge\n                    any fees as of the moment.\n                </p>\n            </div>\n            <br />\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        Is there a minimum fee required when opening an account\n                        with <span className=\"name-logo\">banque.</span>?\n                    </h1>\n                </div>\n                <br />\n                <p className=\"faq-answer\">\n                    There is also no initial deposit or minimum balance required\n                    to open an account.\n                </p>\n            </div>\n            <br />\n            <div className=\"card-container\">\n                <div className=\"main-header\">\n                    <h1 className=\"main-title\">\n                        How do you pronounce{' '}\n                        <span className=\"name-logo\">banque.</span>? What does it\n                        mean?\n                    </h1>\n                </div>\n                <br />\n                <p className=\"faq-answer\">\n                    <span className=\"name-logo\">banque.</span> is pronounced as\n                    /bɑ̃k/ [bangk]. It means \"bank\" in French, nothing special.\n                </p>\n            </div>\n        </>\n    );\n};\n\nexport default Help;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Login from './components/Login.js';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport AdminView from './components/AdminView';\nimport Deposit from './components/Deposit';\nimport Withdraw from './components/Withdraw';\nimport Transfer from './components/Transfer';\nimport Transactions from './components/Transactions';\nimport Settings from './components/Settings';\nimport Help from './components/Help';\n\nfunction App() {\n    const months = [\n        'JAN',\n        'FEB',\n        'MAR',\n        'APR',\n        'MAY',\n        'JUN',\n        'JUL',\n        'AUG',\n        'SEP',\n        'OCT',\n        'NOV',\n        'DEC',\n    ];\n\n    // localStorage.clear();\n\n    const [isAdmin, setIsAdmin] = useState(false);\n\n    // list of users (work in progress)\n    const userList = [\n        {\n            accountNo: null,\n            firstName: 'ADMINISTRATOR',\n            lastName: '',\n            balance: null,\n            username: 'admin',\n            password: 'pass123',\n            isAdmin: true,\n        },\n        {\n            accountNo: 111111,\n            firstName: 'JUAN',\n            lastName: 'DE LA CRUZ',\n            balance: 2000,\n            username: 'juan',\n            password: 'juan23',\n            isAdmin: false,\n        },\n        {\n            accountNo: 111112,\n            firstName: 'JASON',\n            lastName: 'HO',\n            balance: 6900,\n            username: 'jason',\n            password: 'jason123',\n            isAdmin: false,\n        },\n        {\n            accountNo: 111113,\n            firstName: 'EMAN',\n            lastName: 'SIA',\n            balance: 4200,\n            username: 'eman',\n            password: 'eman123',\n            isAdmin: false,\n        },\n    ];\n\n    const transactionList = [\n        {\n            key: 222221,\n            type: 'deposit',\n            accountNo: 111111,\n            firstName: 'JUAN',\n            lastName: 'DE LA CRUZ',\n            amount: 2000,\n            date: 'SEP 08',\n            time: '8:08 PM',\n        },\n        {\n            key: 222222,\n            type: 'deposit',\n            accountNo: 111112,\n            firstName: 'JASON',\n            lastName: 'HO',\n            amount: 6900,\n            date: 'SEP 08',\n            time: '8:08 PM',\n        },\n        {\n            key: 222223,\n            type: 'deposit',\n            accountNo: 111113,\n            firstName: 'EMAN',\n            lastName: 'SIA',\n            amount: 4200,\n            date: 'SEP 08',\n            time: '8:08 PM',\n        },\n    ];\n\n    if (localStorage.bankUsers) {\n        console.log('bankUsers exists in local storage');\n    } else {\n        localStorage.bankUsers = JSON.stringify(userList);\n        console.log('bankUsers does not exist in local storage, just created.');\n    }\n\n    if (localStorage.transactionHistory) {\n        console.log('transactionHistory exists in local storage');\n    } else {\n        localStorage.transactionHistory = JSON.stringify(transactionList);\n        console.log(\n            'transactionHistory does not exist in local storage, just created.'\n        );\n    }\n\n    if (localStorage.accountNumber) {\n        console.log('accountNumber already exists in local storage.');\n    } else {\n        localStorage.accountNumber = 111113;\n    }\n\n    if (localStorage.transactionKey) {\n        console.log('transactionKey already exists in local storage.');\n    } else {\n        localStorage.transactionKey = 222223;\n    }\n\n    if (localStorage.expenseKey) {\n        console.log('expenseKey already exists in local storage.');\n    } else {\n        localStorage.expenseKey = 333330;\n    }\n\n    if (localStorage.allExpenses) {\n        console.log('allExpenses already exists in local storage.');\n    } else {\n        localStorage.allExpenses = JSON.stringify([]);\n    }\n\n    function formatDate(number) {\n        if (number < 10) {\n            return '0' + number;\n        } else {\n            return number;\n        }\n    }\n\n    function getSuffix(hour, minutes) {\n        if (hour === 12 && minutes === 0) {\n            return 'NN';\n        } else if (hour >= 12) {\n            return 'PM';\n        } else {\n            return 'AM';\n        }\n    }\n\n    function twelveHour(hour) {\n        if (hour > 12) {\n            return hour - 12;\n        } else if (hour === 0) {\n            return 12;\n        } else {\n            return hour;\n        }\n    }\n\n    function generateAccountNumber() {\n        const oldAccountNumber = parseInt(localStorage.accountNumber);\n        const newAccountNumber = oldAccountNumber + 1;\n        localStorage.accountNumber = newAccountNumber;\n        return newAccountNumber;\n    }\n    function generateTransactionKey() {\n        const oldTransactionKey = parseInt(localStorage.transactionKey);\n        const newTransactionKey = oldTransactionKey + 1;\n        localStorage.transactionKey = newTransactionKey;\n        return newTransactionKey;\n    }\n\n    function generateExpenseKey() {\n        const oldExpenseKey = parseInt(localStorage.expenseKey);\n        const newExpenseKey = oldExpenseKey + 1;\n        localStorage.expenseKey = newExpenseKey;\n        return newExpenseKey;\n    }\n\n    function addUser(firstName, lastName, balance, username, password) {\n        const newAccountNumber = generateAccountNumber();\n\n        let newUserList = [\n            ...users,\n            {\n                accountNo: newAccountNumber,\n                firstName: firstName,\n                lastName: lastName,\n                balance: balance,\n                username: username,\n                password: password,\n                isAdmin: false,\n            },\n        ];\n        setUserList(newUserList);\n        localStorage.bankUsers = JSON.stringify(newUserList);\n\n        if (balance > 0) {\n            const date = new Date();\n            const hours = formatDate(twelveHour(date.getHours()));\n            const minutes = formatDate(date.getMinutes());\n            // const seconds = formatDate(date.getSeconds());\n            const month = months[date.getMonth()];\n            const day = formatDate(date.getDate());\n            const suffix = getSuffix(date.getHours(), date.getMinutes());\n\n            const newTransactions = [\n                ...transactions,\n                {\n                    key: generateTransactionKey(),\n                    type: 'deposit',\n                    accountNo: newAccountNumber,\n                    firstName: firstName,\n                    lastName: lastName,\n                    amount: balance,\n                    date: `${month} ${day}`,\n                    time: `${hours}:${minutes} ${suffix}`,\n                },\n            ];\n            setTransactions(newTransactions);\n            localStorage.transactionHistory = JSON.stringify(newTransactions);\n        }\n    }\n\n    function transfer(amount, from, to) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const fromIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(from)\n        );\n        const toIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(to)\n        );\n        userCopy[fromIndex].balance -= amount;\n        userCopy[toIndex].balance += amount;\n        setUserList(userCopy);\n\n        const date = new Date();\n        const hours = formatDate(twelveHour(date.getHours()));\n        const minutes = formatDate(date.getMinutes());\n        // const seconds = formatDate(date.getSeconds());\n        const month = months[date.getMonth()];\n        const day = formatDate(date.getDate());\n        const suffix = getSuffix(date.getHours(), date.getMinutes());\n\n        const newTransactions = [\n            ...transactions,\n            {\n                key: generateTransactionKey(),\n                type: 'transfer',\n                from: from,\n                fromFirstName: userCopy[fromIndex].firstName,\n                fromLastName: userCopy[fromIndex].lastName,\n                to: to,\n                toFirstName: userCopy[toIndex].firstName,\n                toLastName: userCopy[toIndex].lastName,\n                amount: amount,\n                date: `${month} ${day}`,\n                time: `${hours}:${minutes} ${suffix}`,\n            },\n        ];\n        setTransactions(newTransactions);\n        localStorage.transactionHistory = JSON.stringify(newTransactions);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    function deposit(amount, account) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const accountIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(account)\n        );\n        userCopy[accountIndex].balance += amount;\n        setUserList(userCopy);\n\n        const date = new Date();\n        const hours = formatDate(twelveHour(date.getHours()));\n        const minutes = formatDate(date.getMinutes());\n        // const seconds = formatDate(date.getSeconds());\n        const month = months[date.getMonth()];\n        const day = formatDate(date.getDate());\n        const suffix = getSuffix(date.getHours(), date.getMinutes());\n\n        const newTransactions = [\n            ...transactions,\n            {\n                key: generateTransactionKey(),\n                type: 'deposit',\n                accountNo: account,\n                firstName: userCopy[accountIndex].firstName,\n                lastName: userCopy[accountIndex].lastName,\n                amount: amount,\n                date: `${month} ${day}`,\n                time: `${hours}:${minutes} ${suffix}`,\n            },\n        ];\n        setTransactions(newTransactions);\n        localStorage.transactionHistory = JSON.stringify(newTransactions);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    function withdraw(amount, account) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const accountIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(account)\n        );\n        userCopy[accountIndex].balance -= amount;\n        setUserList(userCopy);\n\n        const date = new Date();\n        const hours = formatDate(twelveHour(date.getHours()));\n        const minutes = formatDate(date.getMinutes());\n        // const seconds = formatDate(date.getSeconds());\n        const month = months[date.getMonth()];\n        const day = formatDate(date.getDate());\n        const suffix = getSuffix(date.getHours(), date.getMinutes());\n\n        const newTransactions = [\n            ...transactions,\n            {\n                key: generateTransactionKey(),\n                type: 'withdrawal',\n                accountNo: account,\n                firstName: userCopy[accountIndex].firstName,\n                lastName: userCopy[accountIndex].lastName,\n                amount: amount,\n                date: `${month} ${day}`,\n                time: `${hours}:${minutes} ${suffix}`,\n            },\n        ];\n        setTransactions(newTransactions);\n        localStorage.transactionHistory = JSON.stringify(newTransactions);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    function addExpense(account, description, amount) {\n        const allExpensesCopy = [...allExpenses];\n\n        allExpensesCopy.push({\n            account: account,\n            description: description,\n            amount: parseFloat(amount),\n            key: generateExpenseKey(),\n        });\n\n        setAllExpenses(allExpensesCopy);\n        localStorage.allExpenses = JSON.stringify(allExpensesCopy);\n\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const accountIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(account)\n        );\n        userCopy[accountIndex].balance -= amount;\n        setUserList(userCopy);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    const [allExpenses, setAllExpenses] = useState(\n        JSON.parse(localStorage.allExpenses)\n    );\n\n    const [users, setUserList] = useState(JSON.parse(localStorage.bankUsers));\n\n    //state for user details\n    const [currentUser, setUser] = useState(null);\n\n    //state for error message if login failed\n    const [error, setError] = useState('');\n\n    const [successfulSignUp, setSuccessfulSignup] = useState('');\n\n    //function for logging in\n    // const LoginFunction = (details) => {\n    //   console.log(details);\n    //   if (\n    //     details.username === adminUser.username &&\n    //     details.password === adminUser.password\n    //   ) {\n    //     setUser({\n    //       name: adminUser.name,\n    //       username: adminUser.username,\n    //     });\n    //     setError(\"\");\n    //   } else {\n    //     setError(\"Login failed. Please try again.\");\n    //   }\n    // };\n\n    // function LoginFunction(usernameInput, passwordInput) {\n    //   const usernames = users.map((user) => user.username);\n    //   const passwords = users.map((user) => user.password);\n    //   const firstNames = users.map((user) => user.firstName);\n    //   const lastNames = users.map((user) => user.lastName);\n\n    //   const usernameIndex = usernames.findIndex((i) => i === usernameInput);\n    //   const passwordIndex = passwords.findIndex((i) => i === passwordInput);\n\n    //   if (usernameInput === \"\") {\n    //     setError(\"Please enter a username.\");\n    //     setTimeout(() => setError(\"\"), 2000);\n    //   } else if (passwordInput === \"\") {\n    //     setError(\"Please enter a password.\");\n    //     setTimeout(() => setError(\"\"), 2000);\n    //   } else if (\n    //     usernameIndex === passwordIndex &&\n    //     usernameIndex >= 0 &&\n    //     passwordIndex >= 0\n    //   ) {\n    //     setUser({\n    //       name: firstNames[usernameIndex] /* + \" \" + lastNames[usernameIndex] */,\n    //       username: usernameInput,\n    //     });\n    //     setError(\"\");\n    //   } else if (usernameIndex === -1) {\n    //     setError(\"User does not exist.\");\n    //     setTimeout(() => setError(\"\"), 2000);\n    //   } else if (usernameIndex >= 0) {\n    //     setError(\"Incorrect password.\");\n    //     setTimeout(() => setError(\"\"), 2000);\n    //   } else {\n    //     setError(\"Login failed. Please try again.\");\n    //     setTimeout(() => setError(\"\"), 2000);\n    //   }\n    // }\n\n    //function for logging out\n    const Logout = () => {\n        setUser(null);\n        setIsAdmin(false);\n    };\n\n    const [transactions, setTransactions] = useState(\n        JSON.parse(localStorage.transactionHistory)\n    );\n\n    function editUser(accountNo, firstName, lastName, username, password) {\n        const userCopy = [...users];\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const index = accountNos.findIndex((i) => i === accountNo);\n\n        userCopy[index].firstName = firstName;\n        userCopy[index].lastName = lastName;\n        userCopy[index].username = username;\n        userCopy[index].password = password;\n\n        setUserList(userCopy);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    function editExpense(currentExpense, newDescription, newAmount) {\n        const currentKey = currentExpense.key;\n        const keys = allExpenses.map((expense) => expense.key);\n        const index = keys.findIndex(\n            (key) => parseInt(key) === parseInt(currentKey)\n        );\n        const allExpensesCopy = [...allExpenses];\n\n        const userCopy = [...users];\n        const account = currentExpense.account;\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const userIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(account)\n        );\n\n        if (parseFloat(currentExpense.amount) < parseFloat(newAmount)) {\n            userCopy[userIndex].balance -=\n                parseFloat(newAmount) - parseFloat(currentExpense.amount);\n        }\n\n        if (parseFloat(currentExpense.amount) > parseFloat(newAmount)) {\n            userCopy[userIndex].balance +=\n                parseFloat(currentExpense.amount) - parseFloat(newAmount);\n        }\n\n        allExpensesCopy[index].description = newDescription;\n        allExpensesCopy[index].amount = parseFloat(newAmount);\n        setAllExpenses(allExpensesCopy);\n        localStorage.allExpenses = JSON.stringify(allExpensesCopy);\n        setUserList(userCopy);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    function deleteExpense(currentExpense) {\n        const currentKey = currentExpense.key;\n        const keys = allExpenses.map((expense) => expense.key);\n        const index = keys.findIndex(\n            (key) => parseInt(key) === parseInt(currentKey)\n        );\n        const allExpensesCopy = [...allExpenses];\n\n        allExpensesCopy.splice(index, 1);\n\n        const userCopy = [...users];\n        const account = currentExpense.account;\n        const accountNos = userCopy.map((user) => user.accountNo);\n        const userIndex = accountNos.findIndex(\n            (accountNo) => parseInt(accountNo) === parseInt(account)\n        );\n        userCopy[userIndex].balance += currentExpense.amount;\n\n        setAllExpenses(allExpensesCopy);\n        localStorage.allExpenses = JSON.stringify(allExpensesCopy);\n        setUserList(userCopy);\n        localStorage.bankUsers = JSON.stringify(userCopy);\n    }\n\n    return (\n        <div className=\"body\">\n            {/* If the user info is not blank, show dashboard */}\n            {currentUser ? (\n                <Router>\n                    <Navbar LogoutFunction={Logout} isAdmin={isAdmin} />\n                    <div className=\"main-content\">\n                        <Switch>\n                            <Route\n                                path=\"/banking-app\"\n                                exact\n                                component={() => (\n                                    <AdminView\n                                        currentUser={currentUser}\n                                        users={users}\n                                        addUser={(\n                                            firstName,\n                                            lastName,\n                                            balance,\n                                            username,\n                                            password\n                                        ) => {\n                                            addUser(\n                                                firstName,\n                                                lastName,\n                                                balance,\n                                                username,\n                                                password\n                                            );\n                                        }}\n                                        isAdmin={isAdmin}\n                                        addExpense={(\n                                            account,\n                                            expense,\n                                            amount\n                                        ) =>\n                                            addExpense(account, expense, amount)\n                                        }\n                                        allExpenses={allExpenses}\n                                        deleteExpense={(currentExpense) => {\n                                            deleteExpense(currentExpense);\n                                        }}\n                                        editExpense={(\n                                            currentExpense,\n                                            newDescription,\n                                            newAmount\n                                        ) => {\n                                            editExpense(\n                                                currentExpense,\n                                                newDescription,\n                                                newAmount\n                                            );\n                                        }}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/banking-app/deposit\"\n                                component={() => (\n                                    <Deposit\n                                        currentUser={currentUser}\n                                        users={users}\n                                        deposit={(amount, account) => {\n                                            deposit(amount, account);\n                                        }}\n                                        isAdmin={isAdmin}\n                                        transactions={transactions}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/banking-app/withdraw\"\n                                component={() => (\n                                    <Withdraw\n                                        currentUser={currentUser}\n                                        users={users}\n                                        withdraw={(amount, account) => {\n                                            withdraw(amount, account);\n                                        }}\n                                        isAdmin={isAdmin}\n                                        transactions={transactions}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/banking-app/transfer\"\n                                component={() => (\n                                    <Transfer\n                                        currentUser={currentUser}\n                                        users={users}\n                                        transfer={(amount, from, to) => {\n                                            transfer(amount, from, to);\n                                        }}\n                                        isAdmin={isAdmin}\n                                        transactions={transactions}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/banking-app/transactions\"\n                                component={() => (\n                                    <Transactions transactions={transactions} />\n                                )}\n                                isAdmin={isAdmin}\n                            />\n                            <Route\n                                path=\"/banking-app/settings\"\n                                component={() => (\n                                    <Settings\n                                        currentUser={currentUser}\n                                        LogoutFunction={Logout}\n                                        users={users}\n                                        editUser={(\n                                            accountNo,\n                                            firstName,\n                                            lastName,\n                                            username,\n                                            password\n                                        ) =>\n                                            editUser(\n                                                accountNo,\n                                                firstName,\n                                                lastName,\n                                                username,\n                                                password\n                                            )\n                                        }\n                                        isAdmin={isAdmin}\n                                    />\n                                )}\n                            />\n                            <Route path=\"/banking-app/help\">\n                                <Help />\n                            </Route>\n                        </Switch>\n                    </div>\n                </Router>\n            ) : (\n                /* If there is no current user, show login page */\n                <Login\n                    // LoginFunction={LoginFunction}\n                    currentUser={currentUser}\n                    users={users}\n                    error={error}\n                    setError={(a) => setError(a)}\n                    setUser={(a) => setUser(a)}\n                    successfulSignUp={successfulSignUp}\n                    setSuccessfulSignup={(a) => setSuccessfulSignup(a)}\n                    addUser={(\n                        firstName,\n                        lastName,\n                        balance,\n                        username,\n                        password\n                    ) => {\n                        addUser(\n                            firstName,\n                            lastName,\n                            balance,\n                            username,\n                            password\n                        );\n                    }}\n                    setIsAdmin={(a) => setIsAdmin(a)}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}